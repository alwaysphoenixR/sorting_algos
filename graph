#include <iostream>
#include <vector>
#include <queue>
#include <stack>
#include <algorithm>
#include <limits>
using namespace std;

#define INF 1e9

void bfs(int V, vector<vector<int>>& adj, int start) {
    vector<bool> visited(V, false);
    queue<int> q;
    q.push(start);
    visited[start] = true;

    cout << "BFS: ";
    while (!q.empty()) {
        int u = q.front(); q.pop();
        cout << u << " ";
        for (int v : adj[u])
            if (!visited[v]) {
                visited[v] = true;
                q.push(v);
            }
    }
    cout << endl;
}

void dfsUtil(int u, vector<vector<int>>& adj, vector<bool>& visited) {
    visited[u] = true;
    cout << u << " ";
    for (int v : adj[u])
        if (!visited[v])
            dfsUtil(v, adj, visited);
}

void dfs(int V, vector<vector<int>>& adj, int start) {
    vector<bool> visited(V, false);
    cout << "DFS: ";
    dfsUtil(start, adj, visited);
    cout << endl;
}

void topologicalSort(int V, vector<vector<int>>& adj) {
    vector<int> indegree(V, 0);
    for (int u = 0; u < V; u++)
        for (int v : adj[u])
            indegree[v]++;

    queue<int> q;
    for (int i = 0; i < V; i++)
        if (indegree[i] == 0) q.push(i);

    cout << "Topological Sort: ";
    while (!q.empty()) {
        int u = q.front(); q.pop();
        cout << u << " ";
        for (int v : adj[u])
            if (--indegree[v] == 0)
                q.push(v);
    }
    cout << endl;
}

void prim(int V, vector<vector<pair<int, int>>>& adj) {
    vector<int> key(V, INF), parent(V, -1);
    vector<bool> inMST(V, false);
    key[0] = 0;

    for (int count = 0; count < V - 1; count++) {
        int u = -1;
        for (int i = 0; i < V; i++)
            if (!inMST[i] && (u == -1 || key[i] < key[u])) u = i;

        inMST[u] = true;
        for (auto [v, w] : adj[u])
            if (!inMST[v] && w < key[v]) {
                key[v] = w;
                parent[v] = u;
            }
    }

    cout << "Prim's MST:\n";
    for (int i = 1; i < V; i++)
        cout << parent[i] << " - " << i << endl;
}

struct Edge {
    int u, v, w;
    bool operator<(Edge const& other) {
        return w < other.w;
    }
};

int find(int x, vector<int>& parent) {
    return (x == parent[x]) ? x : parent[x] = find(parent[x], parent);
}

void kruskal(int V, vector<Edge>& edges) {
    sort(edges.begin(), edges.end());
    vector<int> parent(V);
    for (int i = 0; i < V; i++) parent[i] = i;

    cout << "Kruskal's MST:\n";
    for (Edge e : edges) {
        int x = find(e.u, parent);
        int y = find(e.v, parent);
        if (x != y) {
            cout << e.u << " - " << e.v << endl;
            parent[x] = y;
        }
    }
}

void dijkstra(int V, vector<vector<pair<int, int>>>& adj, int src) {
    vector<int> dist(V, INF);
    dist[src] = 0;
    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<>> pq;
    pq.push({0, src});

    while (!pq.empty()) {
        auto [d, u] = pq.top(); pq.pop();
        for (auto [v, w] : adj[u]) {
            if (dist[v] > d + w) {
                dist[v] = d + w;
                pq.push({dist[v], v});
            }
        }
    }

    cout << "Dijkstra from " << src << ": ";
    for (int d : dist) cout << d << " ";
    cout << endl;
}

void bellmanFord(int V, vector<Edge>& edges, int src) {
    vector<int> dist(V, INF);
    dist[src] = 0;

    for (int i = 0; i < V - 1; i++)
        for (Edge e : edges)
            if (dist[e.u] != INF && dist[e.u] + e.w < dist[e.v])
                dist[e.v] = dist[e.u] + e.w;

    cout << "Bellman-Ford from " << src << ": ";
    for (int d : dist) cout << d << " ";
    cout << endl;
}

void floydWarshall(int V, vector<vector<int>>& graph) {
    vector<vector<int>> dist = graph;
    for (int k = 0; k < V; k++)
        for (int i = 0; i < V; i++)
            for (int j = 0; j < V; j++)
                if (dist[i][k] < INF && dist[k][j] < INF)
                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j]);

    cout << "Floyd-Warshall Matrix:\n";
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++)
            cout << (dist[i][j] == INF ? -1 : dist[i][j]) << " ";
        cout << endl;
    }
}

int main() {
    int V = 5;
    vector<vector<int>> adjList = {
        {1, 2}, {0, 3}, {0, 3}, {1, 2, 4}, {3}
    };

    bfs(V, adjList, 0);
    dfs(V, adjList, 0);
    topologicalSort(V, adjList);

    vector<vector<pair<int, int>>> weightedAdj = {
        {{1, 2}, {2, 3}},
        {{0, 2}, {3, 4}},
        {{0, 3}, {3, 1}},
        {{1, 4}, {2, 1}, {4, 5}},
        {{3, 5}}
    };

    prim(V, weightedAdj);
    dijkstra(V, weightedAdj, 0);

    vector<Edge> edges = {
        {0, 1, 2}, {0, 2, 3}, {1, 3, 4}, {2, 3, 1}, {3, 4, 5}
    };

    kruskal(V, edges);
    bellmanFord(V, edges, 0);

    vector<vector<int>> fwGraph = {
        {0, 3, INF, 5, INF},
        {2, 0, INF, 4, INF},
        {INF, 1, 0, INF, 7},
        {INF, INF, 2, 0, 6},
        {INF, INF, INF, INF, 0}
    };

    floydWarshall(V, fwGraph);
    return 0;
}
