#include<iostream>
#include <bits/stdc++.h>
#include<vector>
using namespace std;


void selectionSort(vector<int> &arr) {
        int n=arr.size();
        int mini=0;
        for(int i=0;i<n-1;i++){
            mini=i;
            for(int j=i;j<n;j++){
                if(arr[j]<arr[mini]){
                    mini=j;
                }
            }
            swap(arr[i],arr[mini]);
        }
    }

void bubbleSort(vector<int>& arr) {
        int n = arr.size();
        for(int j = n - 1; j > 0; j--) {
            for(int i = 0; i < j; i++) { 
                if(arr[i] > arr[i + 1]) {
                    swap(arr[i], arr[i + 1]);
                }
            }
        }
    }

 void insertionSort(vector<int>& arr) {
       for(int i=1;i<arr.size();i++){
           int j=i;
           while(i>0 && arr[j]<arr[j-1]){
               swap(arr[j],arr[j-1]);
               j--;
           }
       }
    }


    void sortz(vector<int>& nums, int s, int mid, int e) {
        int i = s;
        int j = mid + 1;
        vector<int> a; 

        // Merge two sorted halves
        while (i <= mid && j <= e) {
            if (nums[i] < nums[j]) {
                a.push_back(nums[i++]);
            } else {
                a.push_back(nums[j++]);
            }
        }

        // Copy remaining elements
        while (i <= mid) {
            a.push_back(nums[i++]);
        }
        while (j <= e) {
            a.push_back(nums[j++]);
        }

        // Copy back sorted elements to nums
        for (int k = 0; k < a.size(); k++) {
            nums[s + k] = a[k];  
        }
    }

    void merge_sort(vector<int>& nums, int s, int e) {
        if (s >= e) {
            return;
        }
        int mid = (s + e) / 2;
        merge_sort(nums, s, mid);
        merge_sort(nums, mid + 1, e);
        sortz(nums, s, mid, e); 
    }


int partition(int arr[], int low, int high) {
    int pivot = arr[high], i = low - 1;
    for (int j = low; j < high; j++) {
        if (arr[j] <= pivot) swap(arr[++i], arr[j]);
    }
    swap(arr[i + 1], arr[high]);
    return i + 1;
}

void quickSort(int arr[], int low, int high) {
    if (low < high) {
        int pi = partition(arr, low, high);
        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}


void countingSort(int arr[], int n) {
    int maxVal = *max_element(arr, arr + n);
    vector<int> count(maxVal + 1, 0), output(n);

    for (int i = 0; i < n; i++) count[arr[i]]++;
    for (int i = 1; i <= maxVal; i++) count[i] += count[i - 1];
    for (int i = n - 1; i >= 0; i--) output[--count[arr[i]]] = arr[i];
    for (int i = 0; i < n; i++) arr[i] = output[i];
}

void countingSort(int arr[], int n, int exp) {
    vector<int> output(n), count(10, 0);
    for (int i = 0; i < n; i++) count[(arr[i] / exp) % 10]++;
    for (int i = 1; i < 10; i++) count[i] += count[i - 1];
    for (int i = n - 1; i >= 0; i--) output[--count[(arr[i] / exp) % 10]] = arr[i];
    for (int i = 0; i < n; i++) arr[i] = output[i];
}

void radixSort(int arr[], int n) {
    int maxVal = *max_element(arr, arr + n);
    for (int exp = 1; maxVal / exp > 0; exp *= 10) countingSort(arr, n, exp);
}


void heapify(int arr[], int n, int i) {
    int largest = i, left = 2 * i + 1, right = 2 * i + 2;
    if (left < n && arr[left] > arr[largest]) largest = left;
    if (right < n && arr[right] > arr[largest]) largest = right;
    if (largest != i) {
        swap(arr[i], arr[largest]);
        heapify(arr, n, largest);
    }
}

void heapSort(int arr[], int n) {
    for (int i = n / 2 - 1; i >= 0; i--) heapify(arr, n, i);
    for (int i = n - 1; i > 0; i--) {
        swap(arr[0], arr[i]);
        heapify(arr, i, 0);
    }
}
