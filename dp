#include <iostream>
#include <vector>
#include <algorithm>
#include <climits>
#include <cstring>
using namespace std;

// 0/1 Knapsack
int knapsack01(int W, int wt[], int val[], int n) {
    int dp[n+1][W+1];
    for (int i = 0; i <= n; i++)
        for (int w = 0; w <= W; w++)
            if (i == 0 || w == 0) dp[i][w] = 0;
            else if (wt[i-1] <= w)
                dp[i][w] = max(val[i-1] + dp[i-1][w - wt[i-1]], dp[i-1][w]);
            else dp[i][w] = dp[i-1][w];
    return dp[n][W];
}

// Matrix Chain Multiplication
int matrixChain(int p[], int n) {
    int dp[n][n];
    for (int i = 1; i < n; i++) dp[i][i] = 0;
    for (int len = 2; len < n; len++)
        for (int i = 1; i < n - len + 1; i++) {
            int j = i + len - 1;
            dp[i][j] = INT_MAX;
            for (int k = i; k < j; k++)
                dp[i][j] = min(dp[i][j], dp[i][k] + dp[k+1][j] + p[i-1]*p[k]*p[j]);
        }
    return dp[1][n-1];
}

// Fractional Knapsack
struct Item {
    int val, wt;
    double ratio;
};

bool cmp(Item a, Item b) {
    return a.ratio > b.ratio;
}

double fractionalKnapsack(int W, vector<Item>& items) {
    for (auto& i : items) i.ratio = (double)i.val / i.wt;
    sort(items.begin(), items.end(), cmp);
    double res = 0;
    for (auto i : items) {
        if (W >= i.wt) {
            W -= i.wt;
            res += i.val;
        } else {
            res += i.val * ((double)W / i.wt);
            break;
        }
    }
    return res;
}

// Longest Increasing Subsequence
int LIS(vector<int>& a) {
    int n = a.size();
    vector<int> dp(n, 1);
    for (int i = 1; i < n; i++)
        for (int j = 0; j < i; j++)
            if (a[i] > a[j]) dp[i] = max(dp[i], dp[j] + 1);
    return *max_element(dp.begin(), dp.end());
}

// Travelling Salesman Problem (DP + Bitmask)
int tsp(int mask, int pos, vector<vector<int>>& dist, vector<vector<int>>& dp) {
    int n = dist.size();
    if (mask == (1<<n)-1) return dist[pos][0];
    if (dp[mask][pos] != -1) return dp[mask][pos];
    int ans = INT_MAX;
    for (int city = 0; city < n; city++)
        if ((mask & (1<<city)) == 0)
            ans = min(ans, dist[pos][city] + tsp(mask | (1<<city), city, dist, dp));
    return dp[mask][pos] = ans;
}

// Main Function
int main() {
    // 0/1 Knapsack
    int val[] = {60, 100, 120};
    int wt[] = {10, 20, 30};
    int W = 50, n = 3;
    cout << "0/1 Knapsack: " << knapsack01(W, wt, val, n) << endl;

    // Matrix Chain Multiplication
    int p[] = {40, 20, 30, 10, 30};
    int sz = sizeof(p)/sizeof(p[0]);
    cout << "Matrix Chain Multiplication: " << matrixChain(p, sz) << endl;

    // Fractional Knapsack
    vector<Item> items = {{60, 10}, {100, 20}, {120, 30}};
    cout << "Fractional Knapsack: " << fractionalKnapsack(50, items) << endl;

    // Longest Increasing Subsequence
    vector<int> seq = {10, 9, 2, 5, 3, 7, 101, 18};
    cout << "LIS: " << LIS(seq) << endl;

    // Travelling Salesman Problem
    vector<vector<int>> dist = {
        {0, 10, 15, 20},
        {10, 0, 35, 25},
        {15, 35, 0, 30},
        {20, 25, 30, 0}
    };
    int cityCount = dist.size();
    vector<vector<int>> dp(1<<cityCount, vector<int>(cityCount, -1));
    cout << "TSP: " << tsp(1, 0, dist, dp) << endl;

    return 0;
}
