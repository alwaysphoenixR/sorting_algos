#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

// Bubble Sort
void bubbleSort(int a[], int n) {
    for (int i = 0; i < n-1; i++)
        for (int j = 0; j < n-i-1; j++)
            if (a[j] > a[j+1]) swap(a[j], a[j+1]);
}

// Insertion Sort
void insertionSort(int a[], int n) {
    for (int i = 1; i < n; i++) {
        int key = a[i], j = i - 1;
        while (j >= 0 && a[j] > key) a[j + 1] = a[j--];
        a[j + 1] = key;
    }
}

// Selection Sort
void selectionSort(int a[], int n) {
    for (int i = 0; i < n-1; i++) {
        int min = i;
        for (int j = i+1; j < n; j++)
            if (a[j] < a[min]) min = j;
        swap(a[i], a[min]);
    }
}

// Merge Sort
void merge(int a[], int l, int m, int r) {
    int n1 = m-l+1, n2 = r-m;
    int L[n1], R[n2];
    for (int i = 0; i < n1; i++) L[i] = a[l+i];
    for (int i = 0; i < n2; i++) R[i] = a[m+1+i];
    int i = 0, j = 0, k = l;
    while (i < n1 && j < n2) a[k++] = (L[i] <= R[j]) ? L[i++] : R[j++];
    while (i < n1) a[k++] = L[i++];
    while (j < n2) a[k++] = R[j++];
}

void mergeSort(int a[], int l, int r) {
    if (l < r) {
        int m = (l + r)/2;
        mergeSort(a, l, m);
        mergeSort(a, m+1, r);
        merge(a, l, m, r);
    }
}

// Quick Sort
int partition(int a[], int l, int h) {
    int p = a[h], i = l - 1;
    for (int j = l; j < h; j++)
        if (a[j] < p) swap(a[++i], a[j]);
    swap(a[i+1], a[h]);
    return i + 1;
}

void quickSort(int a[], int l, int h) {
    if (l < h) {
        int p = partition(a, l, h);
        quickSort(a, l, p-1);
        quickSort(a, p+1, h);
    }
}

// Heap Sort
void heapify(int a[], int n, int i) {
    int l = 2*i+1, r = 2*i+2, largest = i;
    if (l < n && a[l] > a[largest]) largest = l;
    if (r < n && a[r] > a[largest]) largest = r;
    if (largest != i) {
        swap(a[i], a[largest]);
        heapify(a, n, largest);
    }
}

void heapSort(int a[], int n) {
    for (int i = n/2-1; i >= 0; i--) heapify(a, n, i);
    for (int i = n-1; i > 0; i--) {
        swap(a[0], a[i]);
        heapify(a, i, 0);
    }
}

// Counting Sort
void countingSort(int a[], int n) {
    int max = a[0];
    for (int i = 1; i < n; i++) if (a[i] > max) max = a[i];
    int count[max + 1] = {0};
    for (int i = 0; i < n; i++) count[a[i]]++;
    int i = 0;
    for (int j = 0; j <= max; j++)
        while (count[j]--) a[i++] = j;
}

// Radix Sort
int getMax(int a[], int n) {
    int m = a[0];
    for (int i = 1; i < n; i++) if (a[i] > m) m = a[i];
    return m;
}

void countSort(int a[], int n, int exp) {
    int output[n], count[10] = {0};
    for (int i = 0; i < n; i++) count[(a[i]/exp)%10]++;
    for (int i = 1; i < 10; i++) count[i] += count[i-1];
    for (int i = n-1; i >= 0; i--) {
        output[count[(a[i]/exp)%10]-1] = a[i];
        count[(a[i]/exp)%10]--;
    }
    for (int i = 0; i < n; i++) a[i] = output[i];
}

void radixSort(int a[], int n) {
    int m = getMax(a, n);
    for (int exp = 1; m/exp > 0; exp *= 10)
        countSort(a, n, exp);
}

// Bucket Sort (for float 0 to 1)
void bucketSort(float a[], int n) {
    vector<float> b[n];
    for (int i = 0; i < n; i++) {
        int idx = n * a[i];
        b[idx].push_back(a[i]);
    }
    for (int i = 0; i < n; i++) sort(b[i].begin(), b[i].end());
    int k = 0;
    for (int i = 0; i < n; i++)
        for (float v : b[i]) a[k++] = v;
}

// Main Function
int main() {
    int a[] = {9, 4, 1, 6, 2};
    int n = sizeof(a)/sizeof(a[0]);

    // Uncomment the sort you want to run:

    // bubbleSort(a, n);
    // insertionSort(a, n);
    // selectionSort(a, n);
    // mergeSort(a, 0, n-1);
    // quickSort(a, 0, n-1);
    // heapSort(a, n);
    // countingSort(a, n);
    // radixSort(a, n);

    // For bucket sort (floats between 0 and 1)
    // float a[] = {0.42, 0.32, 0.23, 0.52, 0.25};
    // int n = sizeof(a)/sizeof(a[0]);
    // bucketSort(a, n);
    // for (int i = 0; i < n; i++) cout << a[i] << " ";

    // Print sorted array
    for (int i = 0; i < n; i++) cout << a[i] << " ";
}
